# baseURI: http://www.edmcouncil.org/skosify
# imports: http://spinrdf.org/spin
# imports: https://spec.edmcouncil.org/fibo/ontology/FND/Utilities/AnnotationVocabulary/
# imports: https://spec.edmcouncil.org/fibo/ontology/FND/Utilities/AnnotationVocabulary/
# imports: http://www.w3.org/2004/02/skos/core
# prefix: skosify

@prefix afn: <http://jena.apache.org/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosify: <http://www.edmcouncil.org/skosify#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix fibo-fnd-utl-av: <https://spec.edmcouncil.org/fibo/ontology/FND/Utilities/AnnotationVocabulary/> .

afn:Select_1
  rdf:type sp:Select ;
  rdfs:label "Select 1"^^xsd:string ;
.
afn:Select_2
  rdf:type sp:Select ;
  rdfs:label "Select 2"^^xsd:string ;
.
arg:text
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
#
# TODO: The import statement below for fibo-fnd-utl-av needs to be versioned according to the same version
#       as we're generating the glossary for
#
<http://www.edmcouncil.org/skosify>
  rdf:type owl:Ontology ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports <https://spec.edmcouncil.org/fibo/ontology/master/latest/FND/Utilities/AnnotationVocabulary/> ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
.
rdf:Property
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 11
CONSTRUCT {
    ?object ?predicate2 ?subject .
    ?subject skos:historyNote \"Rule11 S\" .
    ?object skos:historyNote \"Rule 11 O\" .
}
WHERE {
    ?pp a owl:ObjectProperty .
    ?pp skos:historyNote ?hn .
    FILTER regex(?hn, \"^Rule\") .
    ?subject ?pp ?object .
    ?predicate2 owl:inverseOf ?pp .
}"""^^xsd:string ;
    ] ;
.
owl:Class
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:Concept ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "Classes and Datatypes become Concepts (01)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object rdfs:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "oldlabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "altlabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "oldlabel"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "preflabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "entity"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lentity"^^xsd:string ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "module"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Classes and Datatypes become Concepts"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:Concept ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "Classes and Datatypes become Concepts (01)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "oldlabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "edmc" ;
                sp:arg3 "i" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "altlabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "oldlabel"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "preflabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "entity"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "module"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Classes and Datatypes become Concepts"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "rdfs:label becomes skos:prefLabel.  (02)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "edmc" ;
                sp:arg3 "i" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "entity"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type xsd:string ;
                sp:arg1 [
                    rdf:type sp:coalesce ;
                    sp:arg1 [
                        sp:varName "label"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lentity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            sp:varName "prefLabel"^^xsd:string ;
                                          ] ;
                                        sp:arg2 "”" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "“" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "–" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "’" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "‘" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "( .)|(^.)" ;
                    sp:arg3 "uc($1$2)" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "module"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 2"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "rdfs:label becomes skos:prefLabel.  If none avilable, make one from the localname. (02)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object rdfs:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "label"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "entity"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "label"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "lentity"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            sp:varName "prefLabel"^^xsd:string ;
                                          ] ;
                                        sp:arg2 "”" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "“" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "–" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "’" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "‘" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "( .)|(^.)" ;
                    sp:arg3 "uc($1$2)" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lentity"^^xsd:string ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "module"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 2"^^xsd:string ;
    ] ;
.
owl:Thing
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "Inverse properties become subproperties of skos:related (10)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "Inverse properties become subproperties of skos:related (10)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skobject"^^xsd:string ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subject"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "subject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "subject"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "object"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "subject"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "slabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "subject"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "olabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "object"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "subject"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lsubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "object"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "slabel"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "lsubject"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "psubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "olabel"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "lobject"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        sp:varName "psubject"^^xsd:string ;
                                      ] ;
                                    sp:arg2 "”" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "“" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "–" ;
                            sp:arg3 "-" ;
                          ] ;
                        sp:arg2 "’" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "‘" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titsubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        sp:varName "pobject"^^xsd:string ;
                                      ] ;
                                    sp:arg2 "”" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "“" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "–" ;
                            sp:arg3 "-" ;
                          ] ;
                        sp:arg2 "’" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "‘" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "subject"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "smodule"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lsubject"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "smodule"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "object"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "omodule"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lobject"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "omodule"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "sksubject"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "subject"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "skobject"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "object"^^xsd:string ;
                  ] ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 10"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "note"^^xsd:string ;
              ] ;
            sp:predicate skos:definition ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "hist"^^xsd:string ;
              ] ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "x"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object [
                sp:varName "it"^^xsd:string ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/description> ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:NamedIndividual ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type xsd:string ;
                                    sp:arg1 [
                                        sp:varName "it"^^xsd:string ;
                                      ] ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "note"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "Copy values for " ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "thep"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "^.*(#|/)" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 "(08)" ;
              ] ;
            sp:variable [
                sp:varName "hist"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "x"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "lentity"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "lentity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lencode"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                sp:varName "lencode"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "module"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "x"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "skentity"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:isDefinedBy ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object <http://www.omg.org/techprocess/ab/SpecificationMetadata/SpecificationVersion> ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "type"^^xsd:string ;
                  ] ;
                sp:arg2 owl:AnnotationProperty ;
                sp:arg3 owl:DatatypeProperty ;
                sp:arg4 owl:FunctionalProperty ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 8a"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "note"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thep"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "hist"^^xsd:string ;
              ] ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "x"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object [
                sp:varName "it"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thep"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "thep"^^xsd:string ;
                  ] ;
                sp:arg10 fibo-fnd-utl-av:definitionOrigin ;
                sp:arg11 fibo-fnd-utl-av:synonym ;
                sp:arg12 fibo-fnd-utl-av:explanatoryNote ;
                sp:arg13 fibo-fnd-utl-av:adaptedFrom ;
                sp:arg14 fibo-fnd-utl-av:definitionOrigin ;
                sp:arg15 fibo-fnd-utl-av:synonym ;
                sp:arg16 fibo-fnd-utl-av:explanatoryNote ;
                sp:arg2 skos:changeNote ;
                sp:arg3 skos:definition ;
                sp:arg4 skos:historyNote ;
                sp:arg5 skos:editorialNote ;
                sp:arg6 skos:example ;
                sp:arg7 skos:note ;
                sp:arg8 skos:scopeNote ;
                sp:arg9 fibo-fnd-utl-av:adaptedFrom ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:NamedIndividual ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type xsd:string ;
                                    sp:arg1 [
                                        sp:varName "it"^^xsd:string ;
                                      ] ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "note"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "Copy values for " ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "thep"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "^.*(#|/)" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 "(08)" ;
              ] ;
            sp:variable [
                sp:varName "hist"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "x"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:encode_for_uri ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "lentity"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:encode_for_uri ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "lentity"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lencode"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lencode"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "module"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "x"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "skentity"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:isDefinedBy ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object <http://www.omg.org/techprocess/ab/SpecificationMetadata/SpecificationVersion> ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "type"^^xsd:string ;
                  ] ;
                sp:arg2 owl:AnnotationProperty ;
                sp:arg3 owl:DatatypeProperty ;
                sp:arg4 owl:FunctionalProperty ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 8"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "skparent"^^xsd:string ;
              ] ;
            sp:predicate skos:broader ;
            sp:subject [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "subclass becomes broader (07) (child)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "child"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parent"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skparent"^^xsd:string ;
              ] ;
          ]
          [
            sp:object "subclass becomes broader (07) (parent)" ;
            sp:predicate skos:historyNote ;
            sp:subject [
                sp:varName "skparent"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "parent"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "child"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "parent"^^xsd:string ;
                  ] ;
                sp:arg2 owl:Thing ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "parent"^^xsd:string ;
                  ] ;
                sp:arg2 skos:Concept ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "parent"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "parent"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lparent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "child"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lchild"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "parent"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "pmodule"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "parent"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:encode_for_uri ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "lparent"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:encode_for_uri ;
                    sp:arg1 [
                        sp:varName "lparent"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lcpparent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lcpparent"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "pmodule"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skparent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "child"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "cmodule"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lchild"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "[{]M[}]" ;
                    sp:arg3 [
                        sp:varName "cmodule"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 7"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 13
CONSTRUCT {
    ?skpprop a owl:ObjectProperty .
    ?skdomain ?skpprop ?skrange .
    ?skdomain skos:historyNote \"domain/range become subject/object (13)\" .
    ?skpprop skos:historyNote \"domain/range become subject/object (13)\" .
    ?skpprop rdfs:subPropertyOf skos:related .
    ?skpprop rdfs:isDefinedBy ?p .
}
WHERE {
    skos:Concept <http://www.edmcouncil.org/skosify#px> ?px .
    ?p a owl:ObjectProperty .
FILTER NOT EXISTS {?p rdfs:isDefinedBy []}
    OPTIONAL {
        ?p rdfs:domain ?d .
        ?d a _:0 .
    } .
    OPTIONAL {
        ?p rdfs:range ?r .
        ?r a _:1 .
    } .
    BIND (REPLACE(str(?p), \"^.*(#|/)\", \"\") AS ?pStr) .
    BIND (REPLACE(REPLACE(str(?p), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?pmodule) .
    BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?pStr))), \"[{]M[}]\", ?pmodule)) AS ?skpprop) .
    BIND (REPLACE(str(?d), \"^.*(#|/)\", \"\") AS ?dStr) .
    BIND (REPLACE(REPLACE(str(?d), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?dmodule) .
    BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?dStr))), \"[{]M[}]\", ?dmodule)) AS ?skdomain) .
    BIND (REPLACE(str(?r), \"^.*(#|/)\", \"\") AS ?rStr) .
    BIND (REPLACE(REPLACE(str(?r), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?rmodule) .
    BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?rStr))), \"[{]M[}]\", ?rmodule)) AS ?skrange) .
}"""^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 4
# It looks as if some of these are daisy-chains. Here we turn restrictions into direct links.
# This looks as if we have two branches, one for isPlayedBy and one for playsRole - why are they separate?
# I think property paths will simplify this a lot,perhaps obviating the need for the union.
CONSTRUCT {
    ?skpprop a owl:ObjectProperty .
    ?skpprop skos:historyNote \"Rule 4 a\" .
    ?skpprop rdfs:subPropertyOf skos:related .
    ?skpprop skos:prefLabel ?predx .
    ?skpprop rdfs:isDefinedBy ?w .
    ?skpsubject ?skpprop ?skpobject .
    ?skpsubject skos:historyNote \"Rule 4 b\" .
    ?skpobject rdfs:isDefinedBy ?p .
    ?skpobject skos:historyNote \"Rule 4 c\" .
    ?skpsubject rdfs:isDefinedBy ?s .
    ?skpsubject skos:historyNote \"Rule 4 d\" .
}
WHERE {
    {
        ?s rdfs:subClassOf ?x .
        skos:Concept <http://www.edmcouncil.org/skosify#px> ?px .
        ?x a owl:Restriction .
        ?x (owl:someValuesFrom|owl:allValuesFrom)|owl:onClass ?z .
        ?x owl:onProperty ?y .
        FILTER (?y = <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/isPlayedBy>) .
        OPTIONAL {
            ?y rdfs:label ?yL .
        } .
        ?z owl:onProperty ?w .
        ?z ((owl:someValuesFrom|owl:allValuesFrom)|owl:onClass)|owl:onDataRange ?p .
        FILTER (?p != owl:Thing) .
        BIND (REPLACE(str(?w), \"^.*(#|/)\", \"\") AS ?wStr) .
        BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(?wL, ?yStr), \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?predx) .
        BIND (REPLACE(str(?p), \"^.*(#|/)\", \"\") AS ?xpobject) .
        BIND (REPLACE(str(?s), \"^.*(#|/)\", \"\") AS ?xpsubject) .
        BIND (REPLACE(REPLACE(str(?p), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?pmodule) .
        BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?xpobject))), \"[{]M[}]\", ?pmodule)) AS ?skpobject) .
        BIND (REPLACE(REPLACE(str(?s), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?smodule) .
        BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?xpsubject))), \"[{]M[}]\", ?smodule)) AS ?skpsubject) .
        BIND (REPLACE(REPLACE(str(?w), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?wmodule) .
        BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?wStr))), \"[{]M[}]\", ?module)) AS ?skpprop) .
    }
    UNION
    {
        ?s rdfs:subClassOf ?x .
        ?x a owl:Restriction .
        ?x ((owl:someValuesFrom|owl:allValuesFrom)|owl:onClass)|owl:onDataRange ?z .
        ?x owl:onProperty ?w .
        OPTIONAL {
            ?w rdfs:label ?wL .
        } .
        ?z owl:onProperty ?y .
        FILTER (?y = <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/playsRole>) .
        ?z (owl:someValuesFrom|owl:allValuesFrom)|owl:onClass ?p .
        BIND (REPLACE(str(?w), \"^.*(#|/)\", \"\") AS ?wStr) .
        BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(?wL, ?yStr), \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?predx) .
        BIND (REPLACE(str(?p), \"^.*(#|/)\", \"\") AS ?xpobject) .
        BIND (REPLACE(str(?s), \"^.*(#|/)\", \"\") AS ?xpsubject) .
        BIND (REPLACE(REPLACE(str(?p), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?pmodule) .
        BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?xpobject))), \"[{]M[}]\", ?pmodule)) AS ?skpobject) .
        BIND (REPLACE(REPLACE(str(?s), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?smodule) .
        BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?xpsubject))), \"[{]M[}]\", ?smodule)) AS ?skpsubject) .
        BIND (REPLACE(REPLACE(str(?w), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?wmodule) .
        BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?wStr))), \"[{]M[}]\", ?module)) AS ?skpprop) .
    } .
}"""^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 6
CONSTRUCT {
    <https://spec.edmcouncil.org/fibo/glossary> owl:imports <http://www.w3.org/2004/02/skos/core> .
    <https://spec.edmcouncil.org/fibo/glossary> a owl:Ontology .
}
WHERE {

}"""^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 9
CONSTRUCT {
    ?skpprop a owl:ObjectProperty .
    ?skpprop skos:historyNote ?hist .
    ?skpprop rdfs:subPropertyOf skos:related .
    ?skpprop rdfs:label  ?predx .
    ?skpprop rdfs:isDefinedBy ?y .
    ?skpsubject ?skpprop ?skpobject .
    ?skpsubject skos:historyNote ?hist .
    ?skpsubject rdfs:isDefinedBy ?s .
    ?skpobject rdfs:isDefinedBy ?z .
    ?skpobject skos:historyNote ?hist .
}
WHERE {
    skos:Concept <http://www.edmcouncil.org/skosify#px> ?px .
    ?s rdfs:subClassOf|owl:equivalentClass ?x .
    ?x a owl:Restriction .
    ?x owl:onProperty ?y .
    ?y a owl:ObjectProperty .
    OPTIONAL {
        ?y rdfs:label ?yL .
    } .
    ?x ((owl:onClass|owl:someValuesFrom)|owl:allValuesFrom)|owl:onDataRange ?z .
    ?z a _:0 .
    FILTER (!isBlank(?z)) .
    BIND (REPLACE(str(?y), \"^.*(#|/)\", \"\") AS ?yStr) .
    BIND (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(?yL, ?yStr), \"”\", \"\\\"\"), \"“\", \"\\\"\"), \"–\", \"-\"), \"’\", \"'\"), \"‘\", \"'\") AS ?predx) .
    BIND (REPLACE(str(?z), \"^.*(#|/)\", \"\") AS ?xpobject) .
    BIND (REPLACE(str(?s), \"^.*(#|/)\", \"\") AS ?xpsubject) .
    BIND (REPLACE(REPLACE(str(?z), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?zmodule) .
    BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?xpobject))), \"[{]M[}]\", ?zmodule)) AS ?skpobject) .
    BIND (REPLACE(REPLACE(str(?s), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?smodule) .
    BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?xpsubject))), \"[{]M[}]\", ?smodule)) AS ?skpsubject) .
    BIND (REPLACE(REPLACE(str(?y), \"(/|#)[^/]*$\", \"\"), \"^.*/\", \"\") AS ?ymodule) .
    BIND (URI(REPLACE(CONCAT(?px, ENCODE_FOR_URI(str(?yStr))), \"[{]M[}]\", ?ymodule)) AS ?skpprop) .
LET (?hist := CONCAT (?xpsubject, \" <- \", \" has a restriction involving \", ?yStr, \" and \", ?xpobject))
}"""^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """CONSTRUCT {
    ?cs a skos:ConceptScheme .
}
WHERE {
    skos:Concept <http://www.edmcouncil.org/skosify#px> ?px .
    BIND (URI(REPLACE(CONCAT(?px, \"FIBO-CS\"), \"[{]M[}]\", \"core\")) AS ?cs) .
}"""^^xsd:string ;
    ] ;
.
skos:Concept
  skosify:domain "be"^^xsd:string ;
  skosify:domain "der"^^xsd:string ;
  skosify:domain "fbc"^^xsd:string ;
  skosify:domain "fnd"^^xsd:string ;
  skosify:domain "ind"^^xsd:string ;
  skosify:domain "sec"^^xsd:string ;
  skosify:px "https://spec.edmcouncil.org/fibo/glossary#{M}-"^^xsd:string ;
.
