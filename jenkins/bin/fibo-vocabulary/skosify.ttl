# baseURI: http://www.edmcouncil.org/skosify
# imports: http://purl.org/dc/terms/
# imports: http://spinrdf.org/spin
# imports: http://spinrdf.org/spinx
# imports: http://www.omg.org/techprocess/ab/SpecificationMetadata/
# imports: http://www.w3.org/2004/02/skos/core

@prefix afn: <http://jena.apache.org/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fibo-fnd-utl-av: <https://spec.edmcouncil.org/fibo/FND/Utilities/AnnotationVocabulary/> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosify: <http://www.edmcouncil.org/skosify#> .
@prefix sm: <http://www.omg.org/techprocess/ab/SpecificationMetadata/> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

afn:Select_1
  rdf:type sp:Select ;
  rdfs:label "Select 1"^^xsd:string ;
.
afn:Select_2
  rdf:type sp:Select ;
  rdfs:label "Select 2"^^xsd:string ;
.
arg:a1
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:a2
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:text
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://www.edmcouncil.org/skosify>
  rdf:type owl:Ontology ;
  owl:imports <http://purl.org/dc/terms/> ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports <http://spinrdf.org/spinx> ;
  owl:imports sm: ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
.
skosify:px
  rdf:type owl:DatatypeProperty ;
  rdfs:label "px"^^xsd:string ;
.
skosify:subs
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result"^^xsd:string ;
          ]
        ) ;
      sp:where (
          (
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type xsd:string ;
                          sp:arg1 [
                              sp:varName "a1"^^xsd:string ;
                            ] ;
                        ] ;
                      sp:arg2 "(/|#)[^/#]*$" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "^.*/" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "ont"^^xsd:string ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type sp:replace ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "a1"^^xsd:string ;
                                ] ;
                            ] ;
                          sp:arg2 "(/|#)[^/#]*$" ;
                          sp:arg3 "" ;
                        ] ;
                      sp:arg2 "/[^/]*$" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "^.*/" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "mod"^^xsd:string ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type sp:replace ;
                      sp:arg1 [
                          rdf:type xsd:string ;
                          sp:arg1 [
                              sp:varName "a1"^^xsd:string ;
                            ] ;
                        ] ;
                      sp:arg2 "^.*fibo/ontology/" ;
                      sp:arg3 "" ;
                    ] ;
                  sp:arg2 "/.*$" ;
                  sp:arg3 "" ;
                ] ;
              sp:variable [
                  sp:varName "domain"^^xsd:string ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      rdf:type xsd:string ;
                      sp:arg1 [
                          sp:varName "a2"^^xsd:string ;
                        ] ;
                    ] ;
                  sp:arg2 "[{]M[}]" ;
                  sp:arg3 [
                      sp:varName "mod"^^xsd:string ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "r1"^^xsd:string ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      sp:varName "r1"^^xsd:string ;
                    ] ;
                  sp:arg2 "[{]O[}]" ;
                  sp:arg3 [
                      sp:varName "ont"^^xsd:string ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "r2"^^xsd:string ;
                ] ;
            ]
            [
              rdf:type sp:Bind ;
              sp:expression [
                  rdf:type sp:replace ;
                  sp:arg1 [
                      sp:varName "r2"^^xsd:string ;
                    ] ;
                  sp:arg2 "[{]D[}]" ;
                  sp:arg3 [
                      sp:varName "domain"^^xsd:string ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "result"^^xsd:string ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:a1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:a2 ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the number of values of a given property at the current subject (?this)." ;
  rdfs:label "cardinality"^^xsd:string ;
  rdfs:subClassOf spin:Functions ;
.
rdf:Property
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 11
CONSTRUCT {
    ?object ?predicate2 ?subject .
    ?subject skos:historyNote \"Rule11 S\" .
    ?object skos:historyNote \"Rule 11 O\" .
}
WHERE {
    ?pp a owl:ObjectProperty .
    ?pp skos:historyNote ?hn .
    FILTER regex(?hn, \"^Rule\") .
    ?subject ?pp ?object .
    ?predicate2 owl:inverseOf ?pp .
}"""^^xsd:string ;
    ] ;
.
owl:Class
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:Concept ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object rdfs:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "edmcouncil" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "oldlabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "altlabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "oldlabel"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "preflabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lentity"^^xsd:string ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Classes and Datatypes become Concepts"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:Concept ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "oldlabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "edmc" ;
                sp:arg3 "i" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "altlabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    sp:varName "oldlabel"^^xsd:string ;
                                  ] ;
                                sp:arg2 "”" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "“" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "–" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "’" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "‘" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "preflabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Classes and Datatypes become Concepts"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object rdfs:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "label"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "entity"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "label"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "lentity"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            sp:varName "prefLabel"^^xsd:string ;
                                          ] ;
                                        sp:arg2 "”" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "“" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "–" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "’" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "‘" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "( .)|(^.)" ;
                    sp:arg3 "uc($1$2)" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lentity"^^xsd:string ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 2"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "entity"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "entity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "edmc" ;
                sp:arg3 "i" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type xsd:string ;
                sp:arg1 [
                    rdf:type sp:coalesce ;
                    sp:arg1 [
                        sp:varName "label"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lentity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            sp:varName "prefLabel"^^xsd:string ;
                                          ] ;
                                        sp:arg2 "”" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "“" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "–" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "’" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "‘" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "( .)|(^.)" ;
                    sp:arg3 "uc($1$2)" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titLabel"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "entity"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lentity"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 2"^^xsd:string ;
    ] ;
.
owl:Thing
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "predx"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "y"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skpobject"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "skpsubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpsubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "z"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpobject"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:TriplePath ;
            sp:object [
                sp:varName "x"^^xsd:string ;
              ] ;
            sp:path [
                rdf:type sp:AltPath ;
                sp:path1 rdfs:subClassOf ;
                sp:path2 owl:equivalentClass ;
              ] ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "y"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "y"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "y"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "yL"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "y"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:TriplePath ;
            sp:object [
                sp:varName "z"^^xsd:string ;
              ] ;
            sp:path [
                rdf:type sp:AltPath ;
                sp:path1 [
                    rdf:type sp:AltPath ;
                    sp:path1 [
                        rdf:type sp:AltPath ;
                        sp:path1 owl:onClass ;
                        sp:path2 owl:someValuesFrom ;
                      ] ;
                    sp:path2 owl:allValuesFrom ;
                  ] ;
                sp:path2 owl:onDataRange ;
              ] ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "z"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "y"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "yStr"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:coalesce ;
                                    sp:arg1 [
                                        sp:varName "yL"^^xsd:string ;
                                      ] ;
                                    sp:arg2 [
                                        sp:varName "yStr"^^xsd:string ;
                                      ] ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "predx"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "xpobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "s"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "xpsubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "xpobject"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "s"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "xpsubject"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpsubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "y"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "yStr"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "xpsubject"^^xsd:string ;
                  ] ;
                sp:arg2 " <- " ;
                sp:arg3 " has a restriction involving " ;
                sp:arg4 [
                    sp:varName "yStr"^^xsd:string ;
                  ] ;
                sp:arg5 " and " ;
                sp:arg6 [
                    sp:varName "xpobject"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hist"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 9"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "predx"^^xsd:string ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "w"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skpobject"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "skpsubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpsubject"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject [
                        sp:varName "s"^^xsd:string ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "px"^^xsd:string ;
                      ] ;
                    sp:predicate skosify:px ;
                    sp:subject skos:Concept ;
                  ]
                  [
                    sp:object owl:Restriction ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 owl:someValuesFrom ;
                            sp:path2 owl:allValuesFrom ;
                          ] ;
                        sp:path2 owl:onClass ;
                      ] ;
                    sp:subject [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "y"^^xsd:string ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "y"^^xsd:string ;
                          ] ;
                        sp:arg2 <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/isPlayedBy> ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "yL"^^xsd:string ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "y"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    sp:object [
                        sp:varName "w"^^xsd:string ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "p"^^xsd:string ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 [
                                rdf:type sp:AltPath ;
                                sp:path1 owl:someValuesFrom ;
                                sp:path2 owl:allValuesFrom ;
                              ] ;
                            sp:path2 owl:onClass ;
                          ] ;
                        sp:path2 owl:onDataRange ;
                      ] ;
                    sp:subject [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:not ;
                        sp:arg1 [
                            rdf:type sp:regex ;
                            sp:arg1 [
                                rdf:type xsd:string ;
                                sp:arg1 [
                                    sp:varName "p"^^xsd:string ;
                                  ] ;
                              ] ;
                            sp:arg2 "vocabulary" ;
                          ] ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:notExists ;
                        sp:elements (
                            [
                              sp:object "true"^^xsd:boolean ;
                              sp:predicate owl:deprecated ;
                              sp:subject [
                                  sp:varName "s"^^xsd:string ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:ne ;
                        sp:arg1 [
                            sp:varName "p"^^xsd:string ;
                          ] ;
                        sp:arg2 owl:Thing ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "w"^^xsd:string ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "wStr"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:coalesce ;
                                            sp:arg1 [
                                                sp:varName "wL"^^xsd:string ;
                                              ] ;
                                            sp:arg2 [
                                                sp:varName "yStr"^^xsd:string ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:variable [
                        sp:varName "predx"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "p"^^xsd:string ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpobject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:if ;
                        sp:arg1 [
                            rdf:type sp:exists ;
                            sp:elements (
                                [
                                  sp:object rdfs:Datatype ;
                                  sp:predicate rdf:type ;
                                  sp:subject [
                                      sp:varName "parent"^^xsd:string ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:encode_for_uri ;
                                sp:arg1 [
                                    rdf:type sp:str ;
                                    sp:arg1 [
                                        sp:varName "lparent"^^xsd:string ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 "^." ;
                            sp:arg3 "uc($0)" ;
                          ] ;
                        sp:arg3 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                sp:varName "lparent"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "lcpparent"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "s"^^xsd:string ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpsubject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "p"^^xsd:string ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px"^^xsd:string ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:if ;
                                    sp:arg1 [
                                        rdf:type sp:exists ;
                                        sp:elements (
                                            [
                                              sp:object rdfs:Datatype ;
                                              sp:predicate rdf:type ;
                                              sp:subject [
                                                  sp:varName "p"^^xsd:string ;
                                                ] ;
                                            ]
                                          ) ;
                                      ] ;
                                    sp:arg2 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:encode_for_uri ;
                                            sp:arg1 [
                                                rdf:type sp:str ;
                                                sp:arg1 [
                                                    sp:varName "xpobject"^^xsd:string ;
                                                  ] ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "^." ;
                                        sp:arg3 "uc($0)" ;
                                      ] ;
                                    sp:arg3 [
                                        rdf:type sp:encode_for_uri ;
                                        sp:arg1 [
                                            rdf:type sp:str ;
                                            sp:arg1 [
                                                sp:varName "xpobject"^^xsd:string ;
                                              ] ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpobject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "s"^^xsd:string ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px"^^xsd:string ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "xpsubject"^^xsd:string ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpsubject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "w"^^xsd:string ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px"^^xsd:string ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "wStr"^^xsd:string ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpprop"^^xsd:string ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject [
                        sp:varName "s"^^xsd:string ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "px"^^xsd:string ;
                      ] ;
                    sp:predicate skosify:px ;
                    sp:subject skos:Concept ;
                  ]
                  [
                    sp:object owl:Restriction ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 [
                                rdf:type sp:AltPath ;
                                sp:path1 owl:someValuesFrom ;
                                sp:path2 owl:allValuesFrom ;
                              ] ;
                            sp:path2 owl:onClass ;
                          ] ;
                        sp:path2 owl:onDataRange ;
                      ] ;
                    sp:subject [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "w"^^xsd:string ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "wL"^^xsd:string ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "w"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    sp:object [
                        sp:varName "y"^^xsd:string ;
                      ] ;
                    sp:predicate owl:onProperty ;
                    sp:subject [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "y"^^xsd:string ;
                          ] ;
                        sp:arg2 <http://spec.edmcouncil.org/fibo/FND/Parties/Roles/playsRole> ;
                      ] ;
                  ]
                  [
                    rdf:type sp:TriplePath ;
                    sp:object [
                        sp:varName "p"^^xsd:string ;
                      ] ;
                    sp:path [
                        rdf:type sp:AltPath ;
                        sp:path1 [
                            rdf:type sp:AltPath ;
                            sp:path1 owl:someValuesFrom ;
                            sp:path2 owl:allValuesFrom ;
                          ] ;
                        sp:path2 owl:onClass ;
                      ] ;
                    sp:subject [
                        sp:varName "z"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:notExists ;
                        sp:elements (
                            [
                              sp:object "true"^^xsd:boolean ;
                              sp:predicate owl:deprecated ;
                              sp:subject [
                                  sp:varName "p"^^xsd:string ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Filter ;
                    sp:expression [
                        rdf:type sp:notExists ;
                        sp:elements (
                            [
                              sp:object "true"^^xsd:boolean ;
                              sp:predicate owl:deprecated ;
                              sp:subject [
                                  sp:varName "s"^^xsd:string ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "w"^^xsd:string ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "wStr"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:coalesce ;
                                            sp:arg1 [
                                                sp:varName "wL"^^xsd:string ;
                                              ] ;
                                            sp:arg2 [
                                                sp:varName "yStr"^^xsd:string ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "" ;
                                        sp:arg3 "\"" ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "-" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "'" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:variable [
                        sp:varName "predx"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "p"^^xsd:string ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpobject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "s"^^xsd:string ;
                              ] ;
                          ] ;
                        sp:arg2 "^.*(#|/)" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "xpsubject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "p"^^xsd:string ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px"^^xsd:string ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:if ;
                                    sp:arg1 [
                                        rdf:type sp:exists ;
                                        sp:elements (
                                            [
                                              sp:object rdfs:Datatype ;
                                              sp:predicate rdf:type ;
                                              sp:subject [
                                                  sp:varName "p"^^xsd:string ;
                                                ] ;
                                            ]
                                          ) ;
                                      ] ;
                                    sp:arg2 [
                                        rdf:type sp:replace ;
                                        sp:arg1 [
                                            rdf:type sp:encode_for_uri ;
                                            sp:arg1 [
                                                rdf:type sp:str ;
                                                sp:arg1 [
                                                    sp:varName "xpobject"^^xsd:string ;
                                                  ] ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "^." ;
                                        sp:arg3 "uc($0)" ;
                                      ] ;
                                    sp:arg3 [
                                        rdf:type sp:encode_for_uri ;
                                        sp:arg1 [
                                            rdf:type sp:str ;
                                            sp:arg1 [
                                                sp:varName "xpobject"^^xsd:string ;
                                              ] ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpobject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "s"^^xsd:string ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px"^^xsd:string ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "xpsubject"^^xsd:string ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpsubject"^^xsd:string ;
                      ] ;
                  ]
                  [
                    rdf:type sp:Bind ;
                    sp:expression [
                        rdf:type sp:uri ;
                        sp:arg1 [
                            rdf:type skosify:subs ;
                            arg:a1 [
                                sp:varName "w"^^xsd:string ;
                              ] ;
                            arg:a2 [
                                rdf:type sp:concat ;
                                sp:arg1 [
                                    sp:varName "px"^^xsd:string ;
                                  ] ;
                                sp:arg2 [
                                    rdf:type sp:encode_for_uri ;
                                    sp:arg1 [
                                        rdf:type sp:str ;
                                        sp:arg1 [
                                            sp:varName "wStr"^^xsd:string ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "skpprop"^^xsd:string ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
      rdfs:comment """Rule 4
It looks as if some of these are daisy-chains. Here we turn restrictions into direct links.
This looks as if we have two branches, one for isPlayedBy and one for playsRole - why are they separate?
I think property paths will simplify this a lot,perhaps obviating the need for the union."""^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skrange"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "skdomain"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "p"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "vocabulary" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "d"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:domain ;
                  sp:subject [
                      sp:varName "p"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?0"^^xsd:string ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "d"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:notExists ;
                      sp:elements (
                          [
                            sp:object "true"^^xsd:boolean ;
                            sp:predicate owl:deprecated ;
                            sp:subject [
                                sp:varName "d"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "r"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:range ;
                  sp:subject [
                      sp:varName "p"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?1"^^xsd:string ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "r"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:notExists ;
                      sp:elements (
                          [
                            sp:object "true"^^xsd:boolean ;
                            sp:predicate owl:deprecated ;
                            sp:subject [
                                sp:varName "r"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "p"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "pStr"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "p"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "pStr"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skpprop"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "d"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "dStr"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "d"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "dStr"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skdomain"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "r"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "rStr"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "r"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "rStr"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skrange"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 13"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object skos:related ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "skobject"^^xsd:string ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subject"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate owl:inverseOf ;
            sp:subject [
                sp:varName "subject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "subject"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "object"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "subject"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "object"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "subject"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "slabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "subject"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "olabel"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "object"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "subject"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lsubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "object"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "slabel"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "lsubject"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "psubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "olabel"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "lobject"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        sp:varName "psubject"^^xsd:string ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "-" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titsubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strlang ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type sp:replace ;
                                    sp:arg1 [
                                        sp:varName "pobject"^^xsd:string ;
                                      ] ;
                                    sp:arg2 "" ;
                                    sp:arg3 "\"" ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "-" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "'" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "en" ;
              ] ;
            sp:variable [
                sp:varName "titobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "subject"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lsubject"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sksubject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "object"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lobject"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skobject"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "sksubject"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "subject"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "skobject"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "object"^^xsd:string ;
                  ] ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 10"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object skos:ConceptScheme ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 "FIBO-CS" ;
                      ] ;
                    sp:arg2 "[{]M[}]|[{]D[}]|[{]O[}]" ;
                    sp:arg3 "core" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cs"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "domain"^^xsd:string ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/isPartOf> ;
            sp:subject [
                sp:varName "c"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "c"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:regex ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "c"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "vocabulary" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "s"^^xsd:string ;
                      ] ;
                    arg:a2 "https://spec.edmcouncil.org/fibo/{D}/About{D}/{D}Specification" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "domain"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "note"^^xsd:string ;
              ] ;
            sp:predicate skos:definition ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "x"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object [
                sp:varName "it"^^xsd:string ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/description> ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:NamedIndividual ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type xsd:string ;
                                    sp:arg1 [
                                        sp:varName "it"^^xsd:string ;
                                      ] ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "note"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "Copy values for " ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "thep"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "^.*(#|/)" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 "(08)" ;
              ] ;
            sp:variable [
                sp:varName "hist"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "x"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "lentity"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "lentity"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lencode"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "lentity"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                sp:varName "lencode"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "x"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "skentity"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "vocabulary" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object sm:SpecificationVersion ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "type"^^xsd:string ;
                  ] ;
                sp:arg2 owl:AnnotationProperty ;
                sp:arg3 owl:DatatypeProperty ;
                sp:arg4 owl:FunctionalProperty ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 8a"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "note"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thep"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "x"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            sp:object [
                sp:varName "it"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thep1"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "thep1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lnp1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "lnp1"^^xsd:string ;
                  ] ;
                sp:arg10 "definitionOrigin" ;
                sp:arg11 "synonym" ;
                sp:arg12 "explanatoryNote" ;
                sp:arg2 "changeNote" ;
                sp:arg3 "definition" ;
                sp:arg4 "historyNote" ;
                sp:arg5 "editorialNote" ;
                sp:arg6 "example" ;
                sp:arg7 "note" ;
                sp:arg8 "scopeNote" ;
                sp:arg9 "adaptedFrom" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "lnp1"^^xsd:string ;
                      ] ;
                    sp:arg2 "synonym" ;
                  ] ;
                sp:arg2 skos:altLabel ;
                sp:arg3 [
                    sp:varName "thep1"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "thep"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "This is rule 8 " ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "thep1"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "comment"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:NamedIndividual ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:replace ;
                        sp:arg1 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                rdf:type sp:replace ;
                                sp:arg1 [
                                    rdf:type xsd:string ;
                                    sp:arg1 [
                                        sp:varName "it"^^xsd:string ;
                                      ] ;
                                  ] ;
                                sp:arg2 "" ;
                                sp:arg3 "\"" ;
                              ] ;
                            sp:arg2 "" ;
                            sp:arg3 "\"" ;
                          ] ;
                        sp:arg2 "" ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 "'" ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 "'" ;
              ] ;
            sp:variable [
                sp:varName "note"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "Copy values for " ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "thep"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "^.*(#|/)" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 "(08)" ;
              ] ;
            sp:variable [
                sp:varName "hist"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "(/|#)[^/]*$" ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 "^.*/" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "module"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "x"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:encode_for_uri ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "lentity"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:encode_for_uri ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "lentity"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lencode"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "x"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lencode"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skentity"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "x"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "skentity"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 "^" ;
                        sp:arg2 [
                            rdf:type sp:replace ;
                            sp:arg1 [
                                sp:varName "px"^^xsd:string ;
                              ] ;
                            sp:arg2 "[{]M[}]|[{]D[}]|[{]O[}]" ;
                            sp:arg3 ".*" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "x"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "vocabulary" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object sm:SpecificationVersion ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "x"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "type"^^xsd:string ;
                  ] ;
                sp:arg2 owl:AnnotationProperty ;
                sp:arg3 owl:DatatypeProperty ;
                sp:arg4 owl:FunctionalProperty ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 8"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "skparent"^^xsd:string ;
              ] ;
            sp:predicate skos:broader ;
            sp:subject [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "child"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parent"^^xsd:string ;
              ] ;
            sp:predicate rdfs:isDefinedBy ;
            sp:subject [
                sp:varName "skparent"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "parent"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "child"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "child"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "parent"^^xsd:string ;
                  ] ;
                sp:arg2 owl:Thing ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "parent"^^xsd:string ;
                  ] ;
                sp:arg2 skos:Concept ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "parent"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object "true"^^xsd:boolean ;
                      sp:predicate owl:deprecated ;
                      sp:subject [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "px"^^xsd:string ;
              ] ;
            sp:predicate skosify:px ;
            sp:subject skos:Concept ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "parent"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "parent"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lparent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:replace ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "child"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "^.*(#|/)" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "lchild"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:exists ;
                    sp:elements (
                        [
                          sp:object rdfs:Datatype ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "parent"^^xsd:string ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:encode_for_uri ;
                        sp:arg1 [
                            rdf:type sp:str ;
                            sp:arg1 [
                                sp:varName "lparent"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 "^." ;
                    sp:arg3 "uc($0)" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:encode_for_uri ;
                    sp:arg1 [
                        sp:varName "lparent"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lcpparent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "parent"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lcpparent"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skparent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:uri ;
                sp:arg1 [
                    rdf:type skosify:subs ;
                    arg:a1 [
                        sp:varName "child"^^xsd:string ;
                      ] ;
                    arg:a2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "px"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                rdf:type sp:str ;
                                sp:arg1 [
                                    sp:varName "lchild"^^xsd:string ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "skchild"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Rule 7"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:text """# Rule 6
CONSTRUCT {
    <https://spec.edmcouncil.org/fibo/vocabulary> owl:imports <http://www.w3.org/2004/02/skos/core> .
    <https://spec.edmcouncil.org/fibo/vocabulary> a owl:Ontology .
}
WHERE {

}"""^^xsd:string ;
    ] ;
.
skos:Concept
  skosify:domain "be"^^xsd:string ;
  skosify:domain "der"^^xsd:string ;
  skosify:domain "fbc"^^xsd:string ;
  skosify:domain "fnd"^^xsd:string ;
  skosify:domain "ind"^^xsd:string ;
  skosify:domain "sec"^^xsd:string ;
  skosify:px "https://spec.edmcouncil.org/fibo/{D}/vocabulary#"^^xsd:string ;
.
