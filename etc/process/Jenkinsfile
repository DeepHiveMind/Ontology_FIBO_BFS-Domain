//
// The main Jenkinsfile for FIBO, defining the Build/Publish/Test/Deploy process that is
// executed for each push into the repository.
//
// Note that this file is in the so called "Declarative Pipeline" syntax
//
// See https://jenkins.io/doc/book/pipeline/jenkinsfile/
//
pipeline {

  agent none

  options {

    buildDiscarder(
      logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
    )
    //
    // We let each stage running on each jenkins slave / agent decide what to check out or not
    //
    skipDefaultCheckout()
    //
    // Skip stages once the build status has gone to UNSTABLE.
    //
    skipStagesAfterUnstable()
    //
    // There must be SOME limit, if it hangs or whatever then that's a bug and therefore cancel the job.
    //
    timeout(time: 12, unit: 'HOURS')
    //
    // Prepend all console output generated by the Pipeline run with the time at which the line was emitted
    //
    //timestamps()
  }

  stages {

    stage('Prepare') {
      agent {
        label 'stardog'
      }

      steps {

        //setGitHubPullRequestStatus context: 'fibo-publish', message: '', state: 'PENDING'

        //
        // Clean the workspace on this node, for now. Takes more time but we need to test this with a clean slate
        // every time. Once this all works fine we can skip this step.
        //
        // JG>We can clean the workspace in the settings of the job here: https://jenkins.edmcouncil.org/job/fibo/configure
        //    (Look under Behaviors). That' better than to always do it since this causes a lot of extra time.
        //sh "rm -rf ${env.WORKSPACE}/*"

        //
        // Copy the rdf-toolkit.jar file artifact from the rdf-toolkit-build job (pre-requisite for running publish script)
        //
        step([$class: 'CopyArtifact', filter: '**/rdf-toolkit.jar', fingerprintArtifacts: true, flatten: true, projectName: 'rdf-toolkit-build'])
        //
        // Copy the pellet jar from the build-pellet job
        //
        step([$class: 'CopyArtifact', filter: '**/pellet-cli-*.jar', fingerprintArtifacts: true, flatten: true, projectName: 'build-pellet', target: 'pellet'])
        //
        // Check out the fibo repo' content into the ./fibo directory
        //
        dir('fibo') {
          checkout scm
          echo 'Checked out fibo repo'
        }
        //
        // Then check out the fibo-infra repo content into the ./fibo-infra directory
        //
        dir('fibo-infra') {
          //
          // If you want to check out a specific version of fibo-infra add the "branch:" parameter
          //
          git branch: 'INFRA-224', credentialsId: 'edmcjenkins_at_edmcouncil.org', url: 'git@github.com:edmcouncil/fibo-infra.git'
          //
          // git credentialsId: 'edmcjenkins_at_edmcouncil.org', url: 'git@github.com:edmcouncil/fibo-infra.git'
          echo 'Checked out fibo-infra repo'
          //
          // Stash all the tools in the bin directory
          //
          stash includes: 'bin/**', name: 'infra-bin'
          //
          // Stash all the jenkins related stuff in the jenkins directory
          //
          stash includes: 'jenkins/**', name: 'infra-jenkins'
        }
        //
        // Then run the init command on the fibo-publish script which will set all the GIT_* and JIRA_* vars
        // correctly and store their values in some .env files.
        //
        dir('fibo-infra') {
          echo 'Execute the publish-fibo.sh script:'
          sh './jenkins/bin/publish-fibo.sh init'
          echo 'Finished executing the publish-fibo script'
        }
        initEnvironment()
        //
        // Now stash all files in the env directory for reuse in other workspaces on other agents/slaves
        //
        stash includes: 'env/**', name: 'environment'
        //
        // Then check out the LCC repo into the ./LCC directory
        //
        dir('LCC') {
          git url: 'https://github.com/edmcouncil/LCC.git', credentialsId: 'edmcjenkins'
          echo 'Checked out the LCC repo'
        }
        echo 'Checked it all out'
      }
    } // end of stage 'Prepare'

    stage('Build') {
      agent {
        label 'stardog'
      }

      steps {
        //
        // Execute the publish script
        //
        // TODO: Split this script up in separate "stages" in this repository
        //
        dir('fibo-infra') {
          echo "Execute the publish-fibo.sh script:"
          sh "./jenkins/bin/publish-fibo.sh"
        }

        //
        // Archive the artifacts generated by the publish-fibo.sh script
        //
        dir('target') {
          stash([
            name: 'publish-script-output-stardog-node',
            includes: '**',
            excludes: '**/.git, **/.gitignore',
            useDefaultExcludes: true
          ])
        }
      }
    } // end of stage 'Build'

    //
    // Run the publish on the master jenkins agent by just copying all the generated artifacts right into the workspace
    // on master and let NGINX just serve it from there.
    //
    // This workspace will never be "wiped" so it contains all the older versions as well, wiping this workspace
    // will be bad because we would lose all previously published versions
    //
    stage('Publish') {

      agent {
        label 'master'
      }
      environment {
        NGINX_SPEC_ROOT = '/mnt/jenkins-disk/spec.edmcouncil.org'
      }

      steps {

        sh 'test -d ${NGINX_SPEC_ROOT}'
        sh 'pwd'
        echo "Cleaning workspace before unstashing fresh content"
        sh 'rm -rf *'

        echo 'Unstashing the output of the publish-script as it ran on the stardog node'
        unstash 'publish-script-output-stardog-node'
        sh 'ls -al'
        sh 'find . -name \'.git\' -exec rm -rf {} \\; || true'
        sh 'find . -name \'.gitignore\' -exec rm -f {} \\; || true'

        echo "Copy all generated content to ${env.NGINX_SPEC_ROOT}:"
        sh 'ls -al ${NGINX_SPEC_ROOT}/'
        sh 'cp -vr . ${NGINX_SPEC_ROOT}/'

        //setGitHubPullRequestStatus context: 'fibo-publish', message: '', state: 'SUCCESS'
      }
    } // end of stage "Publish"
  } // end of stages

  post {
    failure {
      mail(
        to: 'jacobus.geluk@bnymellon.com',
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Something is wrong with ${env.BUILD_URL}"
      )
    }
  }
} // end of pipeline

def initEnvironment() {

  env.GIT_BRANCH    = readFile './env/GIT_BRANCH'.trim()
  env.GIT_TAG_NAME  = readFile './env/GIT_TAG_NAME'.trim()
  env.GIT_AUTHOR    = readFile './env/GIT_AUTHOR'.trim()
  env.GIT_COMMENT   = readFile './env/GIT_COMMENT'.trim()
  env.GIT_COMMIT    = readFile './env/GIT_COMMIT'.trim()
  env.JIRA_ISSUE    = readFile './env/JIRA_ISSUE'.trim()

  echo "GIT_BRANCH=${env.GIT_BRANCH}"
  echo "GIT_TAG_NAME=${env.GIT_TAG_NAME}"
  echo "GIT_AUTHOR=${env.GIT_AUTHOR}"
  echo "GIT_COMMENT=${env.GIT_COMMENT}"
  echo "GIT_COMMIT=${env.GIT_COMMIT}"
  echo "JIRA_ISSUE=${env.JIRA_ISSUE}"
}
